input {
  beats {
    port => 5044
  }
}

filter {
    ############################################################
    if [log][file][path] == "/var/log/auth.log" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:hostname} %{DATA:program}(?:\[%{DATA:pid}\])?: pam_unix(?:\(%{DATA:pam_unix_module_name}\))?: %{DATA:auth_failed_message}; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{IPV4:rhost} user=%{GREEDYDATA:luser}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:hostname} %{DATA:program}(?:\[%{DATA:pid}\])?: pam_unix(?:\(%{DATA:pam_unix_module_name}\))?: %{DATA:auth_failed_message}; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=::%{DATA:rm_data}:%{IPV4:rhost}  user=%{GREEDYDATA:luser}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:hostname} %{DATA:program}(?:\[%{DATA:pid}\])?: pam_unix(?:\(%{DATA:pam_unix_module_name}\))?: %{DATA:auth_failed_message}; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{DATA:rhost} user=%{GREEDYDATA:luser}" }
        }
        mutate { 
            add_tag => ["auth.log"]
		}
        if "_grokparsefailure" in [tags] {
		    drop { }
		}
    }

    ############################################################
    if [log][file][path] == "/var/log/apache2/error.log" {
        grok {
            match => { "message" => "\[%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR}\] \[:error\] \[pid %{DATA:pid}\] \[client %{DATA:IPwithPort}\] \[client %{IPV4:ClientIP}\] ModSecurity: Warning. detected XSS using libinjection. \[file \"%{DATA:rule}\"\] \[line \"%{NUMBER}\"\] \[id \"%{NUMBER:id}\"\] \[msg \"%{DATA:ErrorMessage}\"\] \[data \"Matched Data: XSS data found within ARGS:%{WORD:Argument}: %{DATA:Payload}\"\] \[severity \"%{WORD:Severity}\"\] \[ver \"%{DATA}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[hostname \"%{IPV4:HostIP}\"\] \[uri \"%{DATA}\"\] \[unique_id \"%{DATA:UniqueID}\"\], referer: %{GREEDYDATA:RefererURL}" }
	        match => { "message" => "\[%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR}\] \[:error\] \[pid %{DATA:pid}\] \[client %{DATA:IPwithPort}\] \[client %{IPV4:ClientIP}\] ModSecurity: Warning. detected XSS using libinjection. \[file \"%{DATA:rule}\"\] \[line \"%{NUMBER}\"\] \[id \"%{NUMBER:id}\"\] \[msg \"%{DATA:ErrorMessage}\"\] \[data \"Matched Data: XSS data found within ARGS:%{WORD:Argument}: %{DATA:Payload}\"\] \[severity \"%{WORD:Severity}\"\] \[ver \"%{DATA}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[tag \"%{DATA:tag1}\"\] \[hostname \"%{IPV4:HostIP}\"\] \[uri \"%{DATA}\"\] \[unique_id \"%{DATA:UniqueID}\"\]" }
        }
        mutate {
            add_tag => ["error.log"]
        }
        if "_grokparsefailure" in [tags] {
		    drop { }
		}   
    }

    ############################################################
    if [log][file][path] == "/var/log/apache2/access.log" {
        grok {
            match => { "message" => "%{IPV4:ClientIP} - - \[%{MONTHDAY}\/%{MONTH}\/%{YEAR}\:%{TIME} +%{DATA}\] \"%{WORD:HTTPMethod} %{DATA:URLPath} %{DATA:HTTPVersion}\" %{NUMBER:HTTPStatusCode} %{NUMBER:ContentLength} \"%{DATA:Referer}\" \"%{GREEDYDATA:UserAgent}\"" }
        }
        mutate {
            add_tag => ["access.log"]
        }
        if "_grokparsefailure" in [tags] {
            drop { }
        }
    }

    ############################################################
    if [source] == "/var/log/samba/log." {
        grok {
             match => { "message" => "   \(%{IPV4:client_ip_address}\) connect to service %{WORD:share} initially as user %{WORD:username} \(uid\=%{NUMBER:uid}\, gid\=%{NUMBER:gid}\) \(pid\s%{NUMBER:pid}\)" }
         }
        mutate {
             add_tag => ["samba.log"]
         }
        if "_grokparsefailure" in [tags] {
             drop { }
         }
    }

    ############################################################
    if [source] == "/var/log/samba/inotify.txt" {
        grok {
            match => { "message" => "%{DATA:path} %{WORD:action}\,%{WORD:type} %{WORD:name}" }
            match => { "message" => "%{DATA:path} %{WORD:action} %{WORD:name}" }
        }
        mutate {
            add_tag => ["inotify.txt"]
        }
        if "_grokparsefailure" in [tags] {
            drop { }
        }
    }

    ############################################################
    # Add some filter rules if needed here
    #
    ############################################################
	if [log][file][path] == "D:\ELK\Development\ASID-Tool\corelation.log" {	
		grok {
			match => { "message" => "%{DATA:date} %{TIME:time} %{WORD:level} %{WORD:attack_type} Attempts number_of_attempts\=%{NUMBER:number_of_attempts} username\=%{WORD:username} program\=%{WORD:program} ip_address\=%{GREEDYDATA:attacker_ip}" }
			match => { "message" => "%{DATA:date} %{TIME:time} %{WORD:level} %{WORD:attack_type} Attempts number_of_attempts\=%{NUMBER:number_of_attempts} username\=%{WORD:username} program\=%{GREEDYDATA:program}" }
			match => { "message" => "%{DATA:date} %{TIME:time} %{WORD:level} %{WORD:attack_type} Attack attacker_ip\=%{IPV4:attacker_ip} affected_url\=%{URI:affected_url} http_status_code\=%{NUMBER:http_status_code} referer\=%{DATA:referer} user_agent\=%{DATA:user_agent} http_method\=%{WORD:http_method} content_length\=%{GREEDYDATA:content_length}" }
			match => { "message" => "%{DATA:date} %{TIME:time} %{WORD:level} %{DATA:attack_type} Vulnerability Exploited username\=%{WORD:username} share\=%{WORD:share_name} client_ip\=%{IPV4:attacker_ip} folder_name\=%{DATA:folder_name} folder_path\=%{GREEDYDATA:folder_path}" }
			match => { "message" => "%{DATA:date} %{TIME:time} %{WORD:level} %{DATA:attack_type} detected agent_name\=%{WORD:agent_name} object_name\=%{DATA:object_name} process\=%{DATA:process_name} process_path\=%{DATA:process_path} event_id\=%{NUMBER:event_id} access_mask\=%{GREEDYDATA:access_mask}" }
        	}
        	mutate {
            		add_tag => ["corelation.log"]
        	}
       		if "_grokparsefailure" in [tags] {
            		drop { }
        	}    
	}

    ############################################################
}

output {
    if "auth.log" in [tags] {
        elasticsearch {
        	hosts => [ "192.168.18.136:9200" ]
        	index => "authentication_failed_index"
            user => "elastic"
            password => "***changeme***"
        }
    }

    if "error.log" in [tags] {
	    elasticsearch {
        	hosts => [ "192.168.18.136:9200" ]
        	index => "apache2_error_index"
            user => "elastic"
            password => "***changeme***"
        }
    }

    if "access.log" in [tags] {
	    elasticsearch {
        	hosts => [ "192.168.18.136:9200" ]
        	index => "apache2_access_index"
            user => "elastic"
            password => "***changeme***"
        }
    }

	if "samba.log" in [tags] {
		elasticsearch {
			hosts => [ "192.168.18.136:9200" ]
			index => "metasploitable_logs_index1"
            user => "elastic"
            password => "***changeme***"
		}
	}

    if "inotify.txt" in [tags] {
        elasticsearch {
            hosts => [ "192.168.18.136:9200" ]
            index => "inotify_index"
            user => "elastic"
            password => "***changeme***"
        }
    }

    if "corelation.log" in [tags] {
	    elasticsearch {
        	hosts => [ "192.168.18.136:9200" ]
        	index => "corelation_index"
            user => "elastic"
            password => "***changeme***"
        }
    }
}
