input {
	file {
		path => "/var/log/auth.log"
	}
}

filter {
    grok {
		  #tag_on_failure => ["_notparsed"]
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:hostname} %{DATA:program}(?:\[%{DATA:pid}\])?: pam_unix(?:\(%{DATA:pam_unix_module_name}\))?: %{DATA:sys_message}; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=::%{DATA:rm_data}:%{IPV4:rhost}  user=%{GREEDYDATA:luser}" }
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:hostname} %{DATA:program}(?:\[%{DATA:pid}\])?: pam_unix(?:\(%{DATA:pam_unix_module_name}\))?: %{DATA:auth_failed_message}; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{DATA:rhost} user=%{GREEDYDATA:luser}" }
	}

	mutate { 
		remove_field => [ "rm_data","message" ] 
		}

	if "_grokparsefailure" in [tags] {
		drop { }
		}
}

output {
	elasticsearch {
		hosts => [ "localhost:9200" ]
		index => "authentication_failed_index"
		}
	stdout {}
}
